# Docker Compose configuration for local development environment
# This setup provides a playground environment for developing and testing the relayer
# It includes:
# - A PostgreSQL database for storing relayer data
# - The relayer service built from local source code
version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: relayer
      POSTGRES_PASSWORD: relayer_password
      POSTGRES_DB: relayer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U relayer" ]
      interval: 5s
      timeout: 5s
      retries: 5

  smtp:
    build:
      context: .
      dockerfile: SMTP.Dockerfile
    environment:
      - SERVER_HOST=${SMTP_INTERNAL_SERVER_HOST}
      - SERVER_PORT=${SMTP_INTERNAL_SERVER_PORT}
      - SMTP_DOMAIN_NAME=${SMTP_DOMAIN_NAME}
      - SMTP_LOGIN_ID=${SMTP_LOGIN_ID}
      - SMTP_LOGIN_PASSWORD=${SMTP_LOGIN_PASSWORD}
      - MESSAGE_ID_DOMAIN=${SMTP_MESSAGE_ID_DOMAIN}
      - JSON_LOGGER=${SMPT_JSON_LOGGER}
    ports:
      - "${SMTP_PORT}:${SMTP_INTERNAL_SERVER_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SMTP_INTERNAL_SERVER_PORT}/api/ping" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  imap:
    build:
      context: .
      dockerfile: IMAP.Dockerfile
    environment:
      - RELAYER_ENDPOINT=http://host.docker.internal:8000/api/receiveEmail
      - IMAP_LOGIN_ID=${IMAP_LOGIN_ID}
      - IMAP_LOGIN_PASSWORD=${IMAP_LOGIN_PASSWORD}
      - IMAP_DOMAIN_NAME=${IMAP_DOMAIN_NAME}
      - IMAP_PORT=${IMAP_PORT}
      - AUTH_TYPE=${IMAP_AUTH_TYPE}
      - JSON_LOGGER=${IMAP_JSON_LOGGER}
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  postgres_data:
